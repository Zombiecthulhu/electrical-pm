version: '3.8'

services:
  postgres:
    image: postgres:15-alpine
    container_name: electrical_pm_prod_db
    environment:
      POSTGRES_DB: electrical_pm_prod
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: ${DB_PASSWORD}
      PGDATA: /var/lib/postgresql/data/pgdata
    volumes:
      - postgres_prod_data:/var/lib/postgresql/data
    networks:
      - electrical_pm_prod
    restart: unless-stopped
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U postgres"]
      interval: 10s
      timeout: 5s
      retries: 5

  backend:
    build:
      context: ./backend
      dockerfile: Dockerfile
    container_name: electrical_pm_prod_backend
    environment:
      DATABASE_URL: postgresql://postgres:${DB_PASSWORD}@postgres:5432/electrical_pm_prod
      JWT_SECRET: ${JWT_SECRET}
      JWT_EXPIRES_IN: 30m
      REFRESH_TOKEN_SECRET: ${REFRESH_TOKEN_SECRET}
      REFRESH_TOKEN_EXPIRES_IN: 7d
      STORAGE_PATH: ./storage
      MAX_FILE_SIZE: 10485760
      PORT: 5000
      NODE_ENV: production
      CORS_ORIGIN: ${FRONTEND_URL}
    volumes:
      - backend_prod_storage:/app/storage
      - backend_prod_logs:/app/logs
    ports:
      - "5001:5000"
    depends_on:
      postgres:
        condition: service_healthy
    networks:
      - electrical_pm_prod
    restart: unless-stopped

  frontend:
    build:
      context: ./frontend
      dockerfile: Dockerfile
      args:
        REACT_APP_API_URL: ${BACKEND_URL}/api/v1
    container_name: electrical_pm_prod_frontend
    ports:
      - "3001:80"
    depends_on:
      - backend
    networks:
      - electrical_pm_prod
    restart: unless-stopped

volumes:
  postgres_prod_data:
    driver: local
  backend_prod_storage:
    driver: local
  backend_prod_logs:
    driver: local

networks:
  electrical_pm_prod:
    driver: bridge

